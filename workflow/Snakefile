import pandas as pd
import os
import sys

p = os.path.dirname(os.getcwd())
sys.path.append(p)

from utils import *

include: 'download.smk'
configfile: 'config.yml'

# ccre stuff
# ccre_df = pd.read_csv('workflow/ccre_config.tsv', sep='\t')
ccre_df = pd.read_csv('ccre_config.tsv', sep='\t')
ccre_types = ccre_df.ccre_type.unique().tolist()
species = ccre_df.species.unique().tolist()

# procap stuff
procap_meta = process_encode_metadata('procap_metadata.tsv')

# lr stuff
lr_df = pd.read_csv('lr_config.tsv', sep='\t')
lr_meta = process_encode_metadata(encode_meta_file)


wildcard_constraints:
    pc_biosamp='|'.join([re.escape(x) for x in procap_meta.biosamp.tolist()]),
    pc_rep='|'.join([re.escape(x) for x in procap_meta.biorep.astype(str).tolist()]),
    pc_output='|'.join([re.escape(x) for x in procap_meta.output.tolist()]),

rule all:
    input:
        expand(config['ccre']['bed'],
               species=species,
               ccre_type=ccre_types),
        expand(config['procap']['bed'],
               zip,
               pc_biosamp=procap_meta.biosamp.tolist(),
               pc_rep=procap_meta.biorep.tolist(),
               pc_output=procap_meta.output.tolist()),
        expand(config['lr']['ca'],
               species=species),
        expand(config['lr']['meta'],
               species=species),
        expand(config['lr']['filt_ab'],
              species=species)

################################################################################
########################### cCRE download ######################################
################################################################################
def get_ccre_link(wc, ccre_df):
    temp = ccre_df.copy(deep=True)
    return ccre_df.loc[(ccre_df.species==wc.species)&\
                       (ccre_df.ccre_type==wc.ccre_type), 'link'].values[0]

use rule dl as dl_ccre with:
    params:
        link = lambda wc:get_ccre_link(wc, ccre_df)
    output:
        out = temporary(config['ccre']['bed_gz'])

use rule gunzip as gunzip_ccre with:
    input:
        gz = config['ccre']['bed_gz']
    output:
        out = config['ccre']['bed']

################################################################################
########################## ProCap download #####################################
################################################################################
def get_procap_encid(wc, df):
    output_type = wc.pc_output
    biosamp = wc.pc_biosamp
    rep = int(wc.pc_rep)
    temp = df.loc[(df.biosamp==biosamp)&\
                  (df.biorep==rep)&\
                  (df['output']==output_type)]
    return temp['File accession'].values[0]

use rule dl_encid_bed as dl_encid_procap_bed with:
    params:
        encid = lambda wc:get_procap_encid(wc, procap_meta)
    output:
        bed = config['procap']['bed_gz']

use rule gunzip as gunzip_procap with:
    input:
        gz = config['procap']['bed_gz']
    output:
        out = config['procap']['bed']

################################################################################
####################### LR TSS download / proc #################################
################################################################################
def get_lr_link(wc, df, type):
    temp = df.copy(deep=True)
    return df.loc[(df.species==wc.species)&\
                  (df.output_type==type), 'link'].values[0]

use rule dl as dl_lr_ca with:
    params:
        link = lambda wc:get_lr_link(wc, lr_df, 'ca')
    output:
        # out = temporary(config['lr']['ca'])
        out = config['lr']['ca']


use rule dl as dl_lr_meta with:
    params:
        link = lambda wc:get_lr_link(wc, lr_df, 'metadata')
    output:
        # out = temporary(config['lr']['meta'])
        out = config['lr']['meta']

use rule dl as dl_lr_filt_ab with:
    params:
        link = lambda wc:get_lr_link(wc, lr_df, 'filt_ab')
    output:
        # out = temporary(config['lr']['filt_ab'])
        out = config['lr']['filt_ab']

rule get_lr_det_mat:
    input:
        meta = config['lr']['meta'],
        enc_meta = config['lr']['encode_meta'],
        filt_ab = config['lr']['filt_ab']
    resources:
        threads = 4,
        mem_gb = 16
    params:
        min_tpm = 1
    output:
        det_mat = confi['lr']['det_mat']
    run:
        get_det_table(input.meta,
                      input.enc_meta,
                      input.filt_ab,
                      params.min_tpm,
                      output.ofile)
